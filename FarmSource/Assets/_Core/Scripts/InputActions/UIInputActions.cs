//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/_Core/Input/UIInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Farm.InputActions
{
    public partial class @UIInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UIInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIInputActions"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""7b1e13cd-8c31-4851-b04e-5c47bb7397f1"",
            ""actions"": [
                {
                    ""name"": ""ButtonHold"",
                    ""type"": ""Button"",
                    ""id"": ""f75be003-4ddb-423b-bb35-a0f11144bc55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""6c266b21-76b5-4cbb-b16a-81ea4a9df6bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""314e09c5-ab7d-4266-b41a-352694c6bb72"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b31a727-47ec-4e97-8efa-022f2d98dc8a"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_ButtonHold = m_UI.FindAction("ButtonHold", throwIfNotFound: true);
            m_UI_Position = m_UI.FindAction("Position", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // UI
        private readonly InputActionMap m_UI;
        private IUIActions m_UIActionsCallbackInterface;
        private readonly InputAction m_UI_ButtonHold;
        private readonly InputAction m_UI_Position;
        public struct UIActions
        {
            private @UIInputActions m_Wrapper;
            public UIActions(@UIInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ButtonHold => m_Wrapper.m_UI_ButtonHold;
            public InputAction @Position => m_Wrapper.m_UI_Position;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void SetCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterface != null)
                {
                    @ButtonHold.started -= m_Wrapper.m_UIActionsCallbackInterface.OnButtonHold;
                    @ButtonHold.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnButtonHold;
                    @ButtonHold.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnButtonHold;
                    @Position.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPosition;
                }
                m_Wrapper.m_UIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ButtonHold.started += instance.OnButtonHold;
                    @ButtonHold.performed += instance.OnButtonHold;
                    @ButtonHold.canceled += instance.OnButtonHold;
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                }
            }
        }
        public UIActions @UI => new UIActions(this);
        public interface IUIActions
        {
            void OnButtonHold(InputAction.CallbackContext context);
            void OnPosition(InputAction.CallbackContext context);
        }
    }
}
